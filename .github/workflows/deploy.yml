name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and Push Docker Image
        run: |
          docker buildx build --platform linux/amd64 \
            -t ${{ secrets.DOCKER_USERNAME }}/node-helm-app:latest ./node-app \
            --push

      - name: Install kubectl & Helm
        run: |
          curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x ./kubectl && sudo mv ./kubectl /usr/local/bin/kubectl
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Configure Kubeconfig
        run: |
          echo "${{ secrets.KUBECONFIG }}" | base64 --decode > kubeconfig.yaml
          chmod 600 kubeconfig.yaml
        env:
          KUBECONFIG: ${{ github.workspace }}/kubeconfig.yaml

      - name: Test Cluster Connection
        run: kubectl get nodes
        env:
          KUBECONFIG: ${{ github.workspace }}/kubeconfig.yaml

      - name: Create Kubernetes Secret
        run: |
          kubectl create secret generic app-secrets \
            --from-literal=APP_SECRET_KEY=${{ secrets.APP_SECRET_KEY }} \
            --namespace default --dry-run=client -o yaml | kubectl apply -f -
        env:
          KUBECONFIG: ${{ github.workspace }}/kubeconfig.yaml

      - name: Helm Deploy
        run: helm upgrade --install my-node-app ./helm-chart/node-helm-chart --namespace default
        env:
          KUBECONFIG: ${{ github.workspace }}/kubeconfig.yaml
